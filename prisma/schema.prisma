generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  username       String    @unique
  passwordHash   String
  displayName    String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  poems          Poem[]
  followers      Follow[]  @relation("followed")
  following      Follow[]  @relation("follower")
  likes          Like[]
  comments       Comment[]
  refreshTokens  RefreshToken[]
}

model Poem {
  id          Int       @id @default(autoincrement())
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  title       String
  content     String    // poem text (could be long)
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       Like[]
  comments    Comment[]
}

model Follow {
  id         Int      @id @default(autoincrement())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId Int
  followed   User     @relation("followed", fields: [followedId], references: [id])
  followedId Int
  createdAt  DateTime @default(now())

  @@unique([followerId, followedId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  createdAt DateTime @default(now())

  @@unique([userId, poemId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  poem      Poem     @relation(fields: [poemId], references: [id])
  poemId    Int
  content   String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  tokenHash   String   // hashed refresh token
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}
